package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"encoding/json"
	"fmt"
	"friend_graphql/graph/model"

	"github.com/google/uuid"
)

// Post is the resolver for the post field.
func (r *mutationResolver) Post(ctx context.Context) (*model.PostMutation, error) {
	return &model.PostMutation{}, nil
}

// Create is the resolver for the create field.
func (r *postMutationResolver) Create(ctx context.Context, obj *model.PostMutation, input model.NewPost) (model.PostCreateResult, error) {
	userID, err := checkAuthorization(ctx)
	//Todo: сделать тип ошибки Unoftirized
	if err != nil {
		return nil, err
	}
	id, err := uuid.NewUUID()
	if err != nil {
		return model.InternalErrorProblem{Message: "Internal Server Error"}, nil
	}
	imgUrl, err := r.amazonS3.UploadFile(input.File)
	if err != nil {
		return model.InternalErrorProblem{Message: "Problem send file to S3"}, nil
	}
	input.PostID = id.String()
	input.AuthorID = userID
	input.ImgURL = imgUrl
	postMsgKafka, err := json.Marshal(input)
	if err != nil {
		return model.InternalErrorProblem{Message: fmt.Sprintf("Problem encode to JSON")}, nil
	}
	err = r.producer.Produce(postMsgKafka)
	if err != nil {
		return model.InternalErrorProblem{Message: fmt.Sprintf("Problem with kafka %s", err.Error())}, nil
	}
	return model.PostCreateOk{ArticleID: id.String()}, nil
}

// PostMutation returns PostMutationResolver implementation.
func (r *Resolver) PostMutation() PostMutationResolver { return &postMutationResolver{r} }

type postMutationResolver struct{ *Resolver }
