// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"github.com/99designs/gqlgen/graphql"
)

type CommentCreateResult interface {
	IsCommentCreateResult()
}

type PostCreateResult interface {
	IsPostCreateResult()
}

type PostDataResult interface {
	IsPostDataResult()
}

type ProblemInterface interface {
	IsProblemInterface()
	GetMessage() string
}

type UserFindResult interface {
	IsUserFindResult()
}

type Comment struct {
	CommentID    string     `json:"commentID"`
	AuthorID     string     `json:"authorID"`
	AuthorName   string     `json:"authorName"`
	AuthorImgURL string     `json:"authorImgUrl"`
	Content      string     `json:"content"`
	CreatedAt    string     `json:"createdAt"`
	CommentChild []*Comment `json:"commentChild,omitempty"`
}

type CommentMutation struct {
	Create CommentCreateResult `json:"create"`
}

type CommentOk struct {
	CommentID string `json:"commentID"`
}

func (CommentOk) IsCommentCreateResult() {}

type InternalErrorProblem struct {
	Message string `json:"message"`
}

func (InternalErrorProblem) IsCommentCreateResult() {}

func (InternalErrorProblem) IsProblemInterface()     {}
func (this InternalErrorProblem) GetMessage() string { return this.Message }

func (InternalErrorProblem) IsPostCreateResult() {}

func (InternalErrorProblem) IsPostDataResult() {}

func (InternalErrorProblem) IsUserFindResult() {}

type Mutation struct {
}

type NewComment struct {
	ReplyTo  string `json:"replyTo"`
	AuthorID string `json:"authorID"`
	Content  string `json:"content"`
}

type NewPost struct {
	AuthorID 	string `json:"authorID"`
	ImgUrl string `json:"imgUrl"`
	Hashtags  string         `json:"hashtags"`
	Content   string         `json:"content"`
	File      graphql.Upload `json:"file"`
	CreatedAt string         `json:"createdAt"`
}

type Post struct {
	PostID       string     `json:"postID"`
	ImgPersonURL string     `json:"imgPersonUrl"`
	Author       string     `json:"Author"`
	AuthorID     string     `json:"authorID"`
	TagIDS       []*string  `json:"tagIDS,omitempty"`
	Content      string     `json:"content"`
	CreatedAt    *string    `json:"createdAt,omitempty"`
	Watched      *int32     `json:"watched,omitempty"`
	Likes        *int32     `json:"likes,omitempty"`
	Comments     []*Comment `json:"comments,omitempty"`
}

type PostCreateOk struct {
	ArticleID string `json:"articleID"`
}

func (PostCreateOk) IsPostCreateResult() {}

type PostFilter struct {
	Limit  int32              `json:"limit"`
	Offset int32              `json:"offset"`
	Data   *PostIDHashtagData `json:"data"`
}

type PostFindOk struct {
	Posts []*Post `json:"posts,omitempty"`
}

func (PostFindOk) IsPostDataResult() {}

type PostIDHashtagData struct {
	Hashtags *string   `json:"hashtags,omitempty"`
	ID       []*string `json:"id,omitempty"`
}

type PostMutation struct {
	Create PostCreateResult `json:"create"`
}

type PostQuery struct {
	Find PostDataResult `json:"find"`
}

type Query struct {
}

type UnauthorizedError struct {
	Message string `json:"message"`
}

func (UnauthorizedError) IsCommentCreateResult() {}

func (UnauthorizedError) IsProblemInterface()     {}
func (this UnauthorizedError) GetMessage() string { return this.Message }

func (UnauthorizedError) IsPostCreateResult() {}

func (UnauthorizedError) IsPostDataResult() {}

func (UnauthorizedError) IsUserFindResult() {}


