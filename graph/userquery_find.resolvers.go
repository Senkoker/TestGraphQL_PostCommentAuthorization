package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"friend_graphql/graph/model"
	"log"
)

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*model.UserFind, error) {
	return &model.UserFind{}, nil
}

// Find is the resolver for the find field.
func (r *userFindResolver) Find(ctx context.Context, obj *model.UserFind, input *model.UserID) (model.UserFindResult, error) {
	user := new(model.User)
	var postsStr string
	var imagesStr string
	err := r.DB.QueryRowContext(ctx, `SELECT user_id,first_name,second_name,img_url,images,birth_date,
       education,country,city,postIDs FROM users_info where user_id=$1`, userID).Scan(&user.ID, &user.FirstName, &user.SecondName, &user.MainImgURL,
		&imagesStr, &user.BirthDate, &user.Education, &user.Country, &user.City, &postsStr)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	postIDSpointer := splitString(postsStr)
	imagePointer := splitString(imagesStr)
	user.PostIDs = postIDSpointer
	user.Images = imagePointer

	rows, err := r.DB.QueryContext(ctx, `SELECT friend_id,status FROM user_friends where user_id=$1`, userID)
	if err != nil {
		log.Println(err)
		return nil, err
	}
	subscribesIDS := []*string{}
	friendsIDs := []*string{}
	for rows.Next() {
		var friendID string
		var status bool
		err = rows.Scan(&friendID, &status)
		if err != nil {
			log.Println(err)
			continue
		}
		if status {
			friendsIDs = append(friendsIDs, &friendID)
		} else {
			subscribesIDS = append(subscribesIDS, &friendID)
		}
	}
	user.FriendIDs = friendsIDs
	user.SubscribesIDs = subscribesIDS
	return user, nil
}

// UserFind returns UserFindResolver implementation.
func (r *Resolver) UserFind() UserFindResolver { return &userFindResolver{r} }

type userFindResolver struct{ *Resolver }
