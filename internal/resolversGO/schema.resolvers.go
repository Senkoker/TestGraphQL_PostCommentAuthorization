package runtime

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"friend_graphql/graph/model"
)

// CommentChild is the resolver for the commentChild field.
func (r *commentResolver) CommentChild(ctx context.Context, obj *model.Comment, limit *int32, offset *int32) ([]*model.Comment, error) {
	panic(fmt.Errorf("not implemented: CommentChild - commentChild"))
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *model.Post, limit *int32, offset *int32) ([]*model.Comment, error) {
	panic(fmt.Errorf("not implemented: Comments - comments"))
}

// Friends is the resolver for the friends field.
func (r *userResolver) Friends(ctx context.Context, obj *model.User, limit *int32, offset *int32) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Friends - friends"))
}

// Subscribes is the resolver for the subscribes field.
func (r *userResolver) Subscribes(ctx context.Context, obj *model.User, limit *int32, offset *int32) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Subscribes - subscribes"))
}

// Posts is the resolver for the posts field.
func (r *userResolver) Posts(ctx context.Context, obj *model.User, limit *int32, offset *int32) ([]*model.Post, error) {
	panic(fmt.Errorf("not implemented: Posts - posts"))
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type commentResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
