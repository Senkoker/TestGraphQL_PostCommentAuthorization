package runtime

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"friend_graphql/graph/model"
)

func PointerConvert(pointer []*string) []string {
	var result []string
	for _, p := range pointer {
		if *p != "" {
			result = append(result, *p)
		}
	}
	return result
}

// Find is the resolver for the find field.
func (r *postQueryResolver) Find(ctx context.Context, obj *model.PostQuery, filter *model.PostFilter) (model.PostDataResult, error) {
	_, err := AuthorizationCheck(ctx)
	if err != nil {
		fmt.Println(err)
		return model.UnauthorizedError{Message: err.Error()}, nil
	}
	if filter.Data.ID == nil {
		posts, err := r.PostDomain.FeedGetPostsWithHashtag(&filter.Data.Hashtags.Value, &filter.Limit, &filter.Offset, "false")
		if err != nil {
			return model.InternalErrorProblem{Message: err.Error()}, nil
		}
		return model.PostFindOk{Posts: posts}, nil
	}
	postIDs := PointerConvert(filter.Data.ID.Value)
	fmt.Println("postIDs: ", postIDs)
	posts, err := r.PostDomain.FeedGetPosts(postIDs)
	if err != nil {
		return model.InternalErrorProblem{Message: err.Error()}, nil
	}
	return model.PostFindOk{Posts: posts}, nil
}

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func PointerConvert(slicerPointer []*string) []string {
	postID := make([]string, 0, len(slicerPointer))
	for _, id := range slicerPointer {
		postID = append(postID, *id)
	}
	return postID
}
*/
