package runtime

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"friend_graphql/graph/model"
)

func PointerConvert(slicerPointer []*string) []string {
	postID := make([]string, 0, len(slicerPointer))
	for _, id := range slicerPointer {
		postID = append(postID, *id)
	}
	return postID
}

// Find is the resolver for the find field.
func (r *postQueryResolver) Find(ctx context.Context, obj *model.PostQuery, filter *model.PostFilter) (model.PostDataResult, error) {
	_, err := AuthorizationCheck(ctx)
	if err != nil {
		fmt.Println(err)
		return model.UnauthorizedError{Message: err.Error()}, nil
	}
	if filter.Data.ID == nil {
		posts, err := r.PostDomain.FeedGetPostsWithHashtag(filter.Data.Hashtags, &filter.Limit, &filter.Offset, "false")
		if err != nil {
			return model.InternalErrorProblem{Message: err.Error()}, nil
		}
		return model.PostFindOk{Posts: posts}, nil
	}
	postID := PointerConvert(filter.Data.ID)
	posts, err := r.PostDomain.FeedGetPosts(postID)
	if err != nil {
		return model.InternalErrorProblem{Message: err.Error()}, nil
	}
	return model.PostFindOk{Posts: posts}, nil

}
